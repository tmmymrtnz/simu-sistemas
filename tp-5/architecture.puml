@startuml
' Project architecture PlantUML for tp-5
skinparam packageStyle rectangle
skinparam componentStyle rectangle

package "tp5.simulacion" <<Folder>> {
  package core {
    class Agent
    class SimulationConfig
    class SimulationState
    class Vector2
  }

  package engine {
    interface NeighbourProvider
    class CIMNeighbourProvider
    class ContactTracker
    class SimulationEngine
  }

  package model {
    interface PedestrianDynamicsModel
    class SFM2000Model
    class AACPMModel
  }

  package cim {
    class CellIndexMethod
  }

  package output {
    class SimulationOutputWriter
  }

  package setup {
    class SimulationFactory
  }

  class Main
}

package "tp5.analisis" <<Folder>> {
  class animation
  class data_utils
  class punto_a
  class punto_b
  class rhm_stats
  class energy_convergence
}

package "output (run data)" <<Folder>> {
  [states.txt]
  [contacts.txt]
  [plots/]
}

' Relationships / dependencies
Main --> SimulationFactory : uses / entry point
SimulationFactory --> SimulationEngine : builds
SimulationFactory --> PedestrianDynamicsModel : selects model
SimulationEngine --> NeighbourProvider : depends on
NeighbourProvider <|.. CIMNeighbourProvider
CIMNeighbourProvider ..> CellIndexMethod : uses
SimulationEngine --> ContactTracker : tracks collisions
SimulationEngine --> SimulationOutputWriter : writes output
SimulationOutputWriter --> SimulationState : serializes state
SimulationEngine --> Agent : simulates agents (uses Agent, Vector2)
SimulationEngine --> PedestrianDynamicsModel : calls model.update()
SFM2000Model -|> PedestrianDynamicsModel
AACPMModel -|> PedestrianDynamicsModel

' Analysis depends on simulation outputs
energy_convergence ..> "output (run data)" : reads energy files
rhm_stats ..> "output (run data)" : reads energy / rhm
animation ..> "output (run data)" : reads states/contacts

' Notes
note top of tp5.simulacion::SimulationEngine
SimulationEngine: core loop that advances SimulationState
- uses NeighbourProvider to get neighbours
- applies model forces / motion
- uses ContactTracker for contact events
end note

note right of "tp5.analisis"
Analysis scripts consume simulation outputs (states, contacts, energy files)
and produce plots under `output/plots/`.
end note

' Legend
legend right
|= Component |= Responsibility |
| SimulationFactory | constructs and configures simulations |
| SimulationEngine  | main time-stepping engine |
| NeighbourProvider | pluggable neighbourhood strategy (CIM) |
| Models (SFM/AACPM) | behaviour rules for agents |
| OutputWriter      | persist states, contacts, energy |
endlegend

@enduml
